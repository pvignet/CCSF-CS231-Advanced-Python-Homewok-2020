#!/usr/local/bin/python3
# -*- coding: UTF-8 -*-
'''
Implement two algorithms which demonstrably reach the same conclusion and use profile or cProfile to time them both
'''
import cProfile
#Demo: Implement  a recursive Fibonacci genertor
#A: once without a caching decorator
#B  once with a caching decorator
#Using cProfile time A , B
#compare their times
#conclude which has the shortest time

#recursive Fibonacci generator
def fibonacci(num):
    if num == 0:
        return 0
    if num == 1:
        return num
    return fibonacci(num - 1) + fibonacci(num - 2)

#helper to print Fibonacci numbers
def print_fibonacci_series(num):
    for i in range(1, num + 1):
        print( fibonacci(i), end='\t')
    print()


num= 30  # number of Fibonacci to generate
print(f"First {num} Fibonacci numbers generated without caching:")
#time it with cProfile
pr = cProfile.Profile()
pr.enable()
print_fibonacci_series(num)
print()
pr.disable()
pr.print_stats()

#create caching decorator
def memoize(function):
    cache = {}
    def decorated_function(*args):
        if args in cache:
            return cache[args]
        else:
            val = function(*args)
            cache[args] = val
            return val
    return decorated_function
#add the caching  decorator to the same Fibonacci gnerator
@memoize
def fibonacci(n):
    if n < 2:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)
#time it with cProfile
print(f"First {num} Fibonacci numbers generated with the same function that has a caching  decorator:")
pr = cProfile.Profile()
pr.enable()
print_fibonacci_series(num)
print()
pr.disable()
pr.print_stats()

print('Explanation of results:')
print('1st line:  x function calls (n primitive calls) in y seconds - primitive calls are none recursive calls')
print('Ordered by standard name:  sorted by text string of the far right column' )
print('ncalls:  n number of calls , if  n/x means  n total number of calls, x  number of recursions')
print('tottime : total time spent in the function')
print('percall: tottime/ncalls')
print('cumtime: cumulative time spent in this function and subfunctions')
print('percall: cumtime/primitive calls')
print('filename:lineno(function): function at line number')

